<!DOCTYPE html>
<html lang="fr">
    <head>
        <meta charset="UTF-8">
        <title>Constitution d’un framework MVC</title>
        <link href="../style/style.css" rel="stylesheet">
        <link href="../style/correction.css" rel="stylesheet">
    </head>
    <body>
        <h1>Constitution d’un framework MVC</h1>
        <section class="enonce">En plus de revoir et de mettre en &oelig;uvre les différents aspects de PHP présentés de ce cours, l’un des objectifs de ce TP est de montrer une organisation possible du code pour développer un site internet. Au début, tout sera mélangé dans un seul fichier et petit à petit les éléments vont être isolés afin d’être maintenus plus facilement et que le site puisse évoluer en fonction de nouveaux besoins.<br>Pour illustrer ceci, va être mis en place un petit site internet recensant des restaurants et les avis des internautes sur ceux-ci.</section>

        <h2>Mise en place de la base de données</h2>
        <section class="enonce">Le site web extrait ses données d’une base de données MySQL appelée &laquo;&nbsp;Restaurant&nbsp;&raquo;. Voici le script permettant de créer les tables de la base de données  et d’y insérer un jeu de données de test : <a href="SQL/creationBD.sql">creationBD.sql</a>.<br>La base de données ne contient que deux tables :</section>
        <img src="Media/BD.png" alt="schéma de la base de données">

        <h2 class="dif1">La page d’accueil</h2>
        <section class="enonce">Écrire le code de la page d’accueil afin d’afficher dynamiquement l’ensemble des restaurants présents dans la table &laquo;&nbsp;restaurants&nbsp;&raquo;. Le nom du restaurant est un lien qui envoie sur une page (cette page sera créée à une étape ultérieure) &laquo;&nbsp;<code>restaurant.php?idRestaurant=*</code>&nbsp;&raquo; où l’étoile est remplacée par l’identifiant du restaurant. Voici ce à quoi doit ressembler la page :</section>
        <img src="Media/1-vueAccueil.png" alt="résultat attendu">
        <?php
        require_once '../afficheCode.php';
        afficheCode(['Corrections/01/index.php'], true, false, true, 'Dans ce corrigé, la forme alternative du <code>foreach</code> avec les &laquo;&nbsp;:&nbsp;&raquo; et le &laquo;&nbsp;<code>endforeach</code>&nbsp;&raquo; à la place des accolades est utilisée :<br><code>foreach(...):<br>...<br>endforeach;</code><br>Cela permet, sans compromettre la lisibilité du code, de fermer la balise php puis de la réouvrir pour pouvoir écrire directement du code HTML entre temps.', 'Commentaires', null, 14);
        ?>

        <h2 class="dif1">La page détail d’un restaurant</h2>
        <section class="enonce">Écrire le code de la seconde page du site internet qui permet d’afficher dynamiquement les informations sur un restaurant. L’identifiant du restaurant est un paramètre de l’URL de la page. Voici ce à quoi doit ressembler la page :</section>
        <img src="Media/2-vueRestaurant.png" alt="résultat attendu">
        <section class="enonce">Pour l'affichage de la note voici les images utilisées : <img src="Media/etoile.png" alt="*"> et <img src="Media/pasetoile.png" alt="."></section>
        <?php afficheCode(['Corrections/02/restaurant.php'], true, false, true, 'Cette page attend un paramètre passé au travers de l\'URL. Il faut se méfier de la valeur récupérée car l\'utilisateur peut la modifier directement dans l\'URL de la page. Dans ce corrigé, la valeur est d\'abord filtrée (vérification que la valeur est bien présente et que c\'est un nombre entier) puis avant d\'afficher la page, une vérification est faite pour s\'assurer qu\'un restaurant correspond bien à cet identifiant.<br>La mise en forme du numéro de téléphone est effectuée de la manière suivante :<ul><li>La fonction <a href="http://php.net/manual/fr/function.sprintf.php"><code>sprintf()</code></a> avec le format <code>&laquo;&nbsp;%\'.010d&nbsp;&raquo;</code> permet de convertir le nombre en une chaîne de 10 caractères avec des zéros devant pour compléter si nécessaire.</li><li>La fonction <a href="http://php.net/manual/fr/function.chunk-split.php"><code>chunk_split()</code></a> est utilisée afin d\'insérer un espace tous les deux caractères.</li></ul>', 'Commentaires', null, 14); ?>

        <h2 class="dif2">Organisation du code selon le modèle MVC (Modèle-Vue-Contrôleur)</h2>
        <section class="enonce">Une première critique peut être faite : une partie du code est dupliquée. Il serait bien de le mutualiser.<br>Créer un fichier <code>accesDonnees.php</code> qui contient une fonction <code>getConnexion()</code>. Ce fichier sera utilisé par toutes les pages du futur site qui auront besoin de se connecter à la base de données.</section>
        <section class="enonce">Une seconde critique : les fichiers mélangent la partie traitement et la partie affichage.<br>Créer un fichier <code>modeleRestaurant.php</code> qui contient la partie traitement (avec des fonctions <code>getRestaurants()</code>, <code>getRestaurant(idRestaurant)</code> et <code>getAvis(idRestaurant)</code>).<br>Créer deux fichiers <code>vueAccueil.php</code> et <code>vueRestaurant.php</code> qui contiennent la partie présentation. Ces pages ne doivent contenir du code PHP que pour l'affichage de valeurs contenues dans des variables ou des tableaux.</section>
        <section class="enonce">Modifier ensuite les fichiers <code>index.php</code> et <code>restaurant.php</code> en conséquence.</section>
        <section class="enonce">Ainsi les fichiers <code>accesDonnees.php</code> et <code>modeleRestaurant.php</code> constituent la partie <strong>Modèle</strong>.<br>
            Les fichiers <code>index.php</code> et <code>restaurant.php</code> constituent la partie <strong>Contrôleur</strong>.<br>
            Et enfin les fichiers <code>vueAccueil.php</code> et <code>vueRestaurant.php</code> constituent évidemment la partie <strong>Vue</strong></section>
        <?php afficheCode(['Corrections/03/Modele/accesDonnees.php', 'Corrections/03/Modele/modeleRestaurant.php', 'Corrections/03/Vue/vueAccueil.php', 'Corrections/03/Vue/vueRestaurant.php', 'Corrections/03/index.php', 'Corrections/03/restaurant.php'], true, false, true, 'Les fichiers constituant les parties Vue et Modele ont été positionnés dans des répertoires de même nom. Ce n\'est pas le cas pour la partie Contrôleur qui reste à la racine du site puisque le fichier <code>index.php</code> est le point d\'entrée du site.', 'Commentaires', null, 14); ?>

        <h2 class="dif1">Mise en place d'un gabarit pour les pages</h2>
        <section class="enonce">Pour que toutes les pages du site aient le même aspect, il peut être intéressant de construire un gabarit de page. Le gabarit est une page web PHP qui contient des &laquo;&nbsp;trous&nbsp;&raquo;. Ces &laquo;&nbsp;trous&nbsp;&raquo; sont des petits bouts de code PHP qui peuvent être remplacés par la valeur d'une variable. Exemple : <code>&lt;?= $trou ?&gt;</code>. Les variables auront été préalablement initialisées avant de faire appel à ce fichier gabarit.</section>
        <section class="enonce">Créer un fichier <code>gabarit.php</code> avec deux &laquo;&nbsp;trous&nbsp;&raquo;, l'un pour le titre et l'autre pour le contenu de la page. Modifier les fichiers <code>vueAccueil.php</code> et <code>vueRestaurant.php</code> en conséquence.</section>
        <?php afficheCode(['Corrections/04/Vue/gabarit.php', 'Corrections/04/Vue/vueAccueil.php', 'Corrections/04/Vue/vueRestaurant.php'], true, false, true, 'Pour initialiser la variable <code>$contenu</code>, plutôt que de faire plein de concaténations de chaînes de caractères, ce corrigé propose de faire appel aux fonctions permettant de manipuler le flux de sortie HTML.<br>Habituellement tout le code HTML écrit dans une page est envoyé directement au navigateur du client. La fonction <a href="http://php.net/manual/fr/function.ob-start.php"><code>ob_start()</code></a> permet de rediriger ce flux vers une mémoire tampon. Ainsi tout le code HTML écrit après cet appel n\'est plus envoyé au navigateur du client mais mis de côté.<br>La fonction <a href="http://php.net/manual/fr/function.ob-get-clean.php"><code>ob_get_clean()</code></a> permet quant à elle de récupérer une chaîne de caractères contenant tout ce qui avait été stocké dans cette mémoire tampon avant de la réinitialiser.', 'Commentaires', null, 14) ?>
        
        <h2 class="dif2">Une vraie page d'erreur</h2>
        <section class="enonce">Il n'y a pas encore de page permettant d'afficher des messages d'erreur. Lorsqu'une erreur survient, uniquement une phrase est affichée (exemple : &laquo;&nbsp;Ce restaurant n'existe pas&nbsp;&raquo;). Et si l'erreur vient d'un problème de connexion avec la base de données, le problème n'est même pas traité !</section>
        <section class="enonce">Mettre en place une vraie page contenant du code HTML et pas seulement du texte. Pour cela une page <code>VueErreur</code> doit être créée. Modifier les autres pages en conséquence pour qu'en cas d'erreur cette nouvelle page soit appelée.</section>
        <?php afficheCode(['Corrections/05/Vue/vueErreur.php', 'Corrections/05/Modele/accesDonnees.php', 'Corrections/05/index.php', 'Corrections/05/restaurant.php'], true, false, true, 'Une nouvelle option a été ajoutée à la connexion à la base de données : <a href="http://php.net/manual/fr/pdo.setattribute.php"><code>PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION</code></a>. Cette option permet qu\'une <a href="http://php.net/manual/fr/class.pdoexception.php"><code>PDOException</code></a> (classe héritant d\'<a href="http://php.net/manual/fr/class.exception.php"><code>Exception</code></a>) soit levée en cas d\'erreur.<br>Les appels à <a href="http://php.net/manual/fr/function.exit.php"><code>exit()</code></a> ont été remplacés par des levées d\'exceptions. Toutes ces exceptions sont récupérés et la nouvelle page d\'erreur est affichée.', 'Commentaires', null, 14); ?>
        
        <h2 class="dif2">Mise en place d'un contrôleur frontal</h2>
        <section class="enonce">Actuellement, il y a deux pages : la page d'accueil et la page détail d'un restaurant. Ces deux pages reposent chacune sur un contrôleur (respectivement <code>index.php</code> et <code>restaurant.php</code>). Pour traiter les erreurs, un traitement similaire est utilisé dans les deux fichiers. Si le site devient important, la multiplication des contrôleurs peut devenir problématique.</section>
        <section class="enonce">Pour remédier à cela, un contrôleur frontal va être mis en place.<br>Modifier le fichier <code>index.php</code> afin qu’il joue ce rôle. Il va devenir l'unique point d'entrée pour le visiteur, c'est-à-dire que ce sera l'unique URL visible dans la barre d'adresse du navigateur du client. Bien sûr, pour savoir quelle page afficher, il va falloir des informations complémentaires. Pour cela, les paramètres de l'URL sont utilisés (comme c'est déjà le cas pour l'identifiant du restaurant). Par exemple, pour accéder à la page d'un restaurant, il faut utiliser l'adresse <code>index.php?action=restaurant&AMP;id=1</code>. Si le paramètre action n'est pas présent, la page d'accueil est affichée. Le fichier <code>Controleur.php</code> contient les fonctions à appeler en fonction de l'analyse des paramètres de la requête effectuée par <code>index.php</code>.</section>
        <?php afficheCode(['Corrections/06/Controleur/Controleur.php', 'Corrections/06/index.php', 'Corrections/06/Vue/vueAccueil.php'], true, false, true, 'Il est à noter que le fichier <code>restaurant.php</code> a été supprimé.', 'Commentaires', null, 14); ?>
        
        <h2 class="dif2">Passage à la Programmation Orientée Objet pour la partie Modèle</h2>
        <section class="enonce">Le PHP est un langage orienté objet ; cet avantage n'a pas encore été exploité.<br>Mettre en place les classes suivantes pour la partie Modèle : <br><img src="Media/M.png" alt="Diagramme des classes (partie Modèle)"></section>
        <?php afficheCode(['Corrections/07/Modele/ModeleDeDonnees.class.php', 'Corrections/07/Modele/Restaurant.class.php', 'Corrections/07/Modele/Avis.class.php', 'Corrections/07/Controleur/Controleur.php'], true, false, true, 'Il est à noter que les fichiers <code>accesDonnees.php</code> et <code>modeleRestaurant.php</code> ont été supprimés.', 'Commentaires', null, 14); ?>
        
        <h2 class="dif3">Passage à la Programmation Orientée Objet pour la partie Vue</h2>
        <section class="enonce">Les deux vues <code>vueAccueil.php</code> et <code>vueRestaurant.php</code> fonctionnent d'une manière similaire : elles initialisent les variables <code>$titre</code> et <code>$contenu</code>. De plus, l'initialisation de <code>$contenu</code> est réalisée par la même technique, en faisant appel à <code>ob_start()</code> et <code>ob_get_clean()</code>. En observant les vues, il peut être remarqué que comme pour le gabarit il s'agit également de code HTML avec des &laquo;&nbsp;trous&nbsp;&raquo; (Exemple : <code>&lt;h2&gt;&lt;?= $r['nom'] ?&gt;&lt;/h2&gt;</code>).</section>
        <section class="enonce">Créer une nouvelle classe <code>Vue</code>. Elle contient une méthode privée <code>insererDonnees()</code> prenant en paramètre un chemin d'accès à un fichier (avec des &laquo;&nbsp;trous&nbsp;&raquo;) et un tableau contenant les données à utiliser pour compléter les &laquo;&nbsp;trous&nbsp;&raquo;.<br>Une seconde méthode <code>afficher()</code> permet, comme son nom l'indique, d'afficher la vue grâce à deux appels la méthode précédente, l'un pour insérer les données dans le fichier <code>vueAccueil.php</code> ou <code>vueRestaurant.php</code> et l'autre pour insérer les données produites dans le fichier <code>gabarit.php</code>.<br>Modifier les vues en conséquence.</section>
        <img src="Media/V.png" alt="">
        <section class="enonce">Le schéma suivant illustre ce principe de fonctionnement en prenant la vue accueil comme exemple :</section>
        <img src="Media/VueAccueil.png" alt="">
        <?php afficheCode(['Corrections/08/Vue/Vue.class.php', 'Corrections/08/Vue/VueAccueil.php', 'Corrections/08/Vue/VueRestaurant.php', 'Corrections/08/Controleur/Controleur.php', 'Corrections/08/Vue/VueErreur.php', 'Corrections/08/index.php'], true, false, true, 'Pour le titre, la solution propose de le stocker dans un attribut pour pouvoir récupérer cette valeur lors de l\'insertion des données dans le gabarit.<br>La fonction <a href="http://php.net/manual/fr/function.extract.php"><code>extract()</code></a> permet à partir d\'un tableau associatif de créer dynamiquement des variables ayant pour nom la clé et pour valeur la valeur associée.', 'Commentaires', null, 14); ?>
        
        <h2 class="dif3">Passage à la Programmation Orientée Objet pour la partie Contrôleur</h2>
        <section class="enonce">Le fichier <code>index.php</code> s'occupe de récupérer l'action souhaitée par l'utilisateur et d'appeler la méthode adéquate du contrôleur (cela se nomme le &laquo;&nbsp;routage&nbsp;&raquo;) :</section>
        <code>
            <?php highlight_string("<?php
\$action = filter_input(INPUT_GET, 'action', FILTER_SANITIZE_STRING);  
if (\$action == '') {
    accueil();
} elseif (\$action == 'restaurant') {
    restaurant();
} else {
    throw new Exception('Action inconnue');
}") ?></code>
        <section class="enonce">Si les pages du site se multiplient, ce fichier <code>index.php</code> va devenir de plus en plus volumineux. Il serait préférable qu'en fonction de paramètres de l'url (action et contrôleur) soit appelée automatiquement la bonne méthode (action) du bon contrôleur.<br>Une classe <code>Routeur</code> ainsi que deux contrôleurs <code>CtrlAccueil</code> et <code>CtrlRestaurant</code> héritant d'une classe abstraite <code>Controleur</code> doivent être créés.</section>
        <img src="Media/C.png" alt="Diagramme des classes (partie Contrôleur)">
        <section class="enonce">Afin d'automatiser l'affichage de la vue souhaitée avec le mécanisme de routage, placer les fichiers <code>vueAccueil.php</code> et <code>vueRestaurant.php</code> respectivement dans des répertoires <code>Accueil</code> et <code>Restaurant</code> et les renommer <code>index.php</code>. Ainsi à chaque contrôleur correspond un dossier de même nom dans le répertoire Vue et à chaque action de chaque contrôleur correspond une page nommée comme l'action et située dans le répertoire portant le nom du contrôleur.</section>
        <?php afficheCode(['Corrections/09/index.php', 'Corrections/09/Controleur/Routeur.class.php', 'Corrections/09/Controleur/Controleur.class.php', 'Corrections/09/Controleur/CtrlAccueil.class.php', 'Corrections/09/Controleur/CtrlRestaurant.class.php', 'Corrections/09/Vue/Accueil/index.php'], true, false, true, 'utilité a donc été supprimé.<br>Le répertoire <code>Vue</code> est donc organisé de la manière suivante :<br><img src="Media/Vue.png" alt="Répertoire Vue">', 'Commentaires', null, 14); ?>
        
        <h2 class="dif2">Espace de nom et chargement automatique des classes</h2>
        <section class="enonce">La POO est maintenant bien mise en &oelig;uvre mais beaucoup d'instructions <code>require_once</code> sont présentes. Il est possible de faire du chargement dynamique de classes avec PHP. Le problème est de savoir dans quel dossier, il faut aller chercher la classe. Une première solution serait de tester successivement l'existence de la classe dans les dossiers Modele, Controleur et Vue.<br>Mettre en &oelig;uvre une autre solution, en se basant sur les espaces de nom des classes : une classe du namespace Modele sera dans le dossier du même nom.</section>
        <?php afficheCode(['Corrections/10/index.php', 'Corrections/10/Controleur/Routeur.class.php', 'Corrections/10/Controleur/CtrlAccueil.class.php', 'Corrections/10/Controleur/CtrlRestaurant.class.php', 'Corrections/10/Modele/ModeleDeDonnees.class.php', 'Corrections/10/Modele/Restaurant.class.php', 'Corrections/10/Modele/Avis.class.php', 'Corrections/10/Vue/Vue.class.php'], true, false, true, 'La méthode <code>chargementAutomatique()</code> réalise la transformation à partir du nom complet d\'une classe (exemple : <code>Controleur\\Routeur</code>) en un chemin d\'accès au fichier (exemple : <code>Controleur/Routeur.class.php</code>). Notez que pour accéder aux classes PHP, il faut les préfixer d\'un <code>/</code> ou utiliser l\'instruction <code>use</code> afin de ne pas les chercher dans l\'espace de nom courant.', 'Commentaires', null, 14); ?>
        
        <h2 class="dif2">Constitution d'un mini framework</h2>
        <section class="enonce">En analysant ce qui a été créé jusqu'à présent, deux types d'éléments apparaissent : ceux qui sont intrinsèquement liés au site web des restaurants et ceux qui pourraient être utilisés pour créer un site web pour tout autre chose que des restaurants.<br>Regrouper tous les éléments de cette dernière catégorie dans un même répertoire <code>Framework</code>. Il faut bien sûr mettre à jour les espaces de nom pour que les classes puissent être trouvées.<br>Pour la classe <code>ModeleDeDonnees</code>, il n'y a qu'un élément qui dépend du projet des restaurants : c'est la chaîne de connexion à la base de données. Externaliser cet élément dans un fichier de configuration.</section>
        <?php afficheCode(['Corrections/11/Config/conf.ini', 'Corrections/11/Framework/Modele/ModeleDeDonnees.class.php'], true, false, true, ', 'Commentaires', null, 14) ?>
    </body>
</html>
